{"version":3,"sources":["api/users.ts","api/todos.ts","components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","helpers.ts","App.tsx","index.tsx"],"names":["id","name","username","email","title","completed","userId","UserInfo","user","className","href","TodoInfo","todo","cn","TodoList","todos","map","getUserById","users","find","getNewId","arr","ids","el","maxId","Math","max","Number","isFinite","App","useState","todosFromServer","setTodos","usersFromServer","todoTitle","setTodoTitle","selectedUserId","setSelectedUserId","submitted","setSubmitted","todosWithUsers","filter","getTodosWithUsers","action","method","onSubmit","event","preventDefault","newTodo","currentTodos","addTodo","htmlFor","placeholder","type","value","onChange","target","disabled","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5b124730.chunk.js","sourcesContent":["export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import { User } from '../../types/types';\n\ntype Props = {\n  user: User,\n};\n\nexport const UserInfo: React.FC<Props> = ({ user }) => (\n  <a className=\"UserInfo\" href={`mailto:${user.email}`}>\n    {user.name}\n  </a>\n);\n","import cn from 'classnames';\n\nimport { UserInfo } from '../UserInfo/UserInfo';\nimport { TodoWithUser } from '../../types/types';\n\ntype Props = {\n  todo: TodoWithUser,\n};\n\nexport const TodoInfo: React.FC<Props> = ({ todo }) => (\n  <article\n    data-id=\"1\"\n    className={cn('TodoInfo', {\n      'TodoInfo--completed': todo.completed === true,\n    })}\n  >\n    <h2 className=\"TodoInfo__title\">{todo.title}</h2>\n\n    {todo.user && <UserInfo user={todo.user} /> }\n\n  </article>\n);\n","import { TodoInfo } from '../TodoInfo/TodoInfo';\nimport { TodoWithUser } from '../../types/types';\n\ntype Props = {\n  todos: TodoWithUser[],\n};\n\nexport const TodoList: React.FC<Props> = ({ todos }) => (\n  <section className=\"TodoList\">\n    {todos.map((todo) => (\n      <TodoInfo\n        todo={todo}\n        key={todo.id}\n      />\n    ))}\n  </section>\n);\n","import { Todo, TodoWithUser, User } from './types/types';\n\nexport const getUserById = (\n  users: User[],\n  id: number,\n): User | null => (\n  users.find(user => user.id === id) || null\n);\n\nexport const getTodosWithUsers = (\n  todos: Todo[],\n  users: User[],\n): TodoWithUser[] => {\n  return todos.filter(todo => todo.userId)\n    .map(todo => ({\n      ...todo,\n      user: getUserById(users, todo.userId)!,\n    }));\n};\n\nexport const getNewId = (arr: { id: number }[]): number => {\n  const ids = arr.map(el => el.id);\n  const maxId = Math.max(...ids);\n\n  if (!Number.isFinite(maxId)) {\n    return 1;\n  }\n\n  return maxId + 1;\n};\n","import './App.scss';\n\nimport { useState } from 'react';\n\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\nimport { TodoList } from './components/TodoList/TodoList';\nimport { getNewId, getTodosWithUsers } from './helpers';\nimport { Todo } from './types/types';\n\nexport const App = () => {\n  const [todos, setTodos] = useState(todosFromServer);\n  const [users] = useState(usersFromServer);\n\n  const [todoTitle, setTodoTitle] = useState('');\n  const [selectedUserId, setSelectedUserId] = useState(0);\n  const [submitted, setSubmitted] = useState(false);\n\n  const todosWithUsers = getTodosWithUsers(todos, usersFromServer);\n\n  const addTodo = (\n    title: string,\n    userId: number,\n  ) => {\n    const newTodo: Todo = {\n      id: getNewId(todos),\n      title,\n      completed: false,\n      userId,\n    };\n\n    setTodos(currentTodos => [\n      ...currentTodos,\n      newTodo,\n    ]);\n  };\n\n  const clearForm = () => {\n    setTodoTitle('');\n    setSelectedUserId(0);\n  };\n\n  const onSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    if (selectedUserId && todoTitle) {\n      addTodo(todoTitle, selectedUserId);\n      clearForm();\n      setSubmitted(false);\n    } else {\n      setSubmitted(true);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <form\n        action=\"/api/todos\"\n        method=\"POST\"\n        onSubmit={onSubmit}\n      >\n        <div className=\"field\">\n          <label htmlFor=\"Title\">Title: </label>\n          <input\n            placeholder=\"Enter a title\"\n            type=\"text\"\n            data-cy=\"titleInput\"\n            value={todoTitle}\n            onChange={event => setTodoTitle(event.target.value)}\n          />\n          {submitted && !todoTitle\n          && <span className=\"error\">Please enter a title</span>}\n        </div>\n\n        <div className=\"field\">\n          <label htmlFor=\"User\">User: </label>\n          <select\n            data-cy=\"userSelect\"\n            value={selectedUserId}\n            onChange={event => setSelectedUserId(+event.target.value)}\n          >\n            <option value=\"0\" disabled>Choose a user</option>\n\n            {users.map(user => (\n              <option\n                key={user.id}\n                value={user.id}\n              >\n                {user.name}\n              </option>\n            ))}\n\n          </select>\n          {submitted && !selectedUserId\n          && <span className=\"error\">Please choose a user</span>}\n        </div>\n\n        <button\n          type=\"submit\"\n          data-cy=\"submitButton\"\n        >\n          Add\n        </button>\n      </form>\n\n      <TodoList todos={todosWithUsers} />\n\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}